Вирішив імпортувати все, окрім року, як текст, а потім модифікувати отриману таблицю, під потреби завдання
1.1
CREATE DATABASE pandemic;

1.2
SELECT * FROM pandemic.infectious_cases;

1.3
SET SQL_SAFE_UPDATES = 0;

UPDATE infectious_cases
SET
  Number_yaws          = NULLIF(Number_yaws, ''),
  polio_cases          = NULLIF(polio_cases, ''),
  cases_guinea_worm    = NULLIF(cases_guinea_worm, ''),
  Number_smallpox      = NULLIF(Number_smallpox, ''),
  Number_cholera_cases = NULLIF(Number_cholera_cases, ''),
  Number_rabies        = NULLIF(Number_rabies, ''),
  Number_malaria       = NULLIF(Number_malaria, ''),
  Number_hiv           = NULLIF(Number_hiv, ''),
  Number_tuberculosis  = NULLIF(Number_tuberculosis, '');

SET SQL_SAFE_UPDATES = 1;


1.4
ALTER TABLE infectious_cases
  CHANGE COLUMN Entity entity VARCHAR(255) NOT NULL,
  CHANGE COLUMN Code   code   VARCHAR(15) NULL,
  CHANGE COLUMN `Year` `year`   INT NOT NULL;

  CHANGE COLUMN Number_yaws          numberYaws         INT NULL,
  CHANGE COLUMN polio_cases          polioCases         INT NULL,
  CHANGE COLUMN cases_guinea_worm    casesGuineaWorm    INT NULL,
  CHANGE COLUMN Number_smallpox      numberSmallpox     INT NULL,
  CHANGE COLUMN Number_cholera_cases numberCholeraCases INT NULL,

  CHANGE COLUMN Number_rabies        numberRabies       FLOAT NULL,
  CHANGE COLUMN Number_malaria       numberMalaria      FLOAT NULL,
  CHANGE COLUMN Number_hiv           numberHiv          FLOAT NULL,
  CHANGE COLUMN Number_tuberculosis  numberTuberculosis FLOAT NULL;

1.5 Перевірка
SELECT `infectious_cases`.`entity`,
    `infectious_cases`.`code`,
    `infectious_cases`.`year`,
    `infectious_cases`.`numberYaws`,
    `infectious_cases`.`polioCases`,
    `infectious_cases`.`casesGuineaWorm`,
    `infectious_cases`.`numberRabies`,
    `infectious_cases`.`numberMalaria`,
    `infectious_cases`.`numberHiv`,
    `infectious_cases`.`numberTuberculosis`,
    `infectious_cases`.`numberSmallpox`,
    `infectious_cases`.`numberCholeraCases`
FROM `pandemic`.`infectious_cases`;

2.1
CREATE TABLE entities (
    id INT AUTO_INCREMENT PRIMARY KEY,
    entity VARCHAR(255),
    code   VARCHAR(15)
);

2.2
INSERT INTO entities (entity, code)
SELECT DISTINCT entity, code
FROM infectious_cases;

2.3
CREATE TABLE IF NOT EXISTS infectious_cases_normalized (
    id                   INT AUTO_INCREMENT PRIMARY KEY,
    entity_id            INT          NOT NULL,
    year                 INT          NULL,
    numberYaws           INT          NULL,
    polioCases           INT          NULL,
    casesGuineaWorm      INT          NULL,
    numberRabies         FLOAT  	  NULL,
    numberMalaria        FLOAT  	  NULL,
    numberHiv            FLOAT 		  NULL,
    numberTuberculosis   FLOAT		  NULL,
    numberSmallpox       INT          NULL,
    numberCholeraCases   INT          NULL,

    FOREIGN KEY (entity_id) REFERENCES entities(id)
);

2.4
INSERT INTO infectious_cases_normalized (
  entity_id, year,
  numberYaws, polioCases, casesGuineaWorm,
  numberRabies, numberMalaria, numberHiv,
  numberTuberculosis, numberSmallpox, numberCholeraCases
)
SELECT 
    e.id,
    ic.year,    
    CAST(NULLIF(ic.numberYaws, '') AS SIGNED),
    CAST(NULLIF(ic.polioCases, '') AS SIGNED),
    CAST(NULLIF(ic.casesGuineaWorm, '') AS SIGNED),
    CAST(NULLIF(ic.numberRabies, '') AS FLOAT),
    CAST(NULLIF(ic.numberMalaria, '') AS FLOAT),
    CAST(NULLIF(ic.numberHiv, '') AS FLOAT),
    CAST(NULLIF(ic.numberTuberculosis, '') AS FLOAT),
    CAST(NULLIF(ic.numberSmallpox, '') AS SIGNED),
    CAST(NULLIF(ic.numberCholeraCases, '') AS SIGNED)

FROM infectious_cases AS ic
JOIN entities AS e 
    ON  ic.entity = e.entity
    AND ic.code   = e.code;

2.5 Перевірка
SELECT COUNT(*) AS normalized_count
FROM infectious_cases_normalized;

3.
SELECT 
    e.entity,
    e.code,
    AVG(ic.numberRabies) AS avg_rabies,
    MIN(ic.numberRabies) AS min_rabies,
    MAX(ic.numberRabies) AS max_rabies,
    SUM(ic.numberRabies) AS sum_rabies
FROM infectious_cases_normalized AS ic
JOIN entities AS e ON ic.entity_id = e.id
WHERE ic.numberRabies IS NOT NULL
GROUP BY e.entity, e.code
ORDER BY avg_rabies DESC
LIMIT 10;

4.
SELECT 
  `year` AS original_year,
  DATE(CONCAT(`year`, '-01-01')) AS january_1_date,
  CURRENT_DATE() AS today,
  TIMESTAMPDIFF(YEAR, DATE(CONCAT(`year`, '-01-01')), CURRENT_DATE()) AS diff_in_years
FROM infectious_cases_normalized
LIMIT 10;

5.
DROP FUNCTION IF EXISTS calc_year_diff;

DELIMITER $$
CREATE FUNCTION calc_year_diff (p_year INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE base_date DATE;
    SET base_date = DATE(CONCAT(p_year, '-01-01'));
    RETURN TIMESTAMPDIFF(YEAR, base_date, CURRENT_DATE());
END$$
DELIMITER ;

SELECT
    entity_id,
    `year`,
    calc_year_diff(`year`) AS years_since_that
FROM infectious_cases_normalized
LIMIT 5;
